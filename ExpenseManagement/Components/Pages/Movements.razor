@page "/movements"
@using ExpenseManagement.Shared
@rendermode InteractiveServer
@inject HttpClient Http

<h1>Movimientos</h1>
<br />
<table class="table">
    <thead>
        <tr>
            <th scope="col">#</th>
            <th scope="col">Fecha</th>
            <th scope="col">Descripción</th>
            <th scope="col">Cantidad</th>
            <th scope="col">Tipo</th>
            <th scope="col">Nombre</th>
            <th scope="col">Opciones</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var m in MovementsList)
        {
            <tr>
                <th scope="row">@m.Id</th>
                <td>@m.Date</td>
                <td>@m.Description</td>
                <td>@m.Quantity</td>
                <td>@m.Type</td>
                <td>@m.User?.Name</td>
                <td>
                    <button class="btn btn-success">Editar</button>
                    <button class="btn btn-warning" @onclick="(()=>DeleteMovement(m.Id))">Eliminar</button>
                </td>
            </tr>
        }
    </tbody>
</table>
<br />

<h3>Nuevo Movimiento</h3>
<label>Usuario</label>
<EditForm Model="@movement">
    <InputSelect class="form-control" @bind-Value="@movement.UserId">
        <option selected value=0>Elegir Usuario</option>
        @foreach (var user in UserList)
        {
            <option value="@user.Id">@user.Name</option>
        }
    </InputSelect>
</EditForm>
<label>Contidad</label>
<input class="form-control" type="number" @bind-value=movement.Quantity />
<label>Tipo</label>
<select class="form-control" @bind="movement.Type">
    <option selected value="Ingreso">Ingreso</option>
    <option selected value="Gasto">Gasto</option>
</select>
<label>Descripcion</label>

<input type="text" class="form-control" @bind-value=movement.Description />
<br />
<button class="btn btn-primary" @onclick="NewMovement">Guardar</button>

@code {
    public static List<User> UserList = new List<User>();
    public static List<Movement> MovementsList = new List<Movement>();

    User MyUser = new User();
    Movement movement = new Movement();

    protected override async Task OnInitializedAsync()
    {
        await UpdatePage();
    }

    async Task NewMovement()
    {
        var respuesta = await Http.PostAsJsonAsync("api/Movement/NewMovement", movement);

        await UpdatePage();
    }

    async Task UpdatePage()
    {
        var users = await Http.GetFromJsonAsync<List<User>>("api/User/GetUsers");
        UserList = users;

        var movements = await Http.GetFromJsonAsync<List<Movement>>("api/Movement/GetMovements");
        MovementsList = movements;
    }

    async Task DeleteMovement(int id)
    {
        var response = await Http.DeleteAsync($"api/Movement/{id}");
        await UpdatePage();
    }
}